Challenge 1: 
q1) SELECT first_name, last_name, email FROM customers;

  
Challenge 2: 
q2) SELECT DISTINCT rating FROM film;


Challenge 3:
q1) SELECT email 
FROM customer 
WHERE first_name = 'Nancy';

q2) SELECT DESCription 
FROM film 
WHERE title = 'Outlaw Hanky';

q3) SELECT phone 
FROM address 
WHERE address = '259 Ipoh Drive';


Challenge 4:
q1) SELECT customer_id 
FROM payment 
ORDER BY payment_date ASC 
LIMIT 10;

q2) SELECT title 
FROM film 
ORDER BY length ASC 
LIMIT 5;


Challenge 5:
q1) SELECT COUNT(payment_id) 
FROM payment 
WHERE amount > 5;

q2) SELECT COUNT(actor_id) 
FROM actor 
WHERE first_name ILIKE 'p%';

q3) SELECT COUNT(DISTINCT district) FROM address;
q4) SELECT DISTINCT district FROM address;

q5) SELECT COUNT(*) 
FROM film  
WHERE rating = 'R' AND replacement_cost 
BETWEEN 5 AND 15;

q6) SELECT COUNT( * ) FROM film WHERE title ILIKE '%Truman%'


Challenge 6:
q1) SELECT COUNT(customer_id) 
FROM payment 
GROUP BY staff_id

q2) SELECT rating, ROUND(AVG(replacement_cost),3) 
FROM film 
GROUP BY rating 

q3) SELECT customer_id, SUM(amount) 
FROM payment 
GROUP BY customer_id 
ORDER BY SUM(amount) DESC 
LIMIT 5


Challenge 7: 
q1) SELECT customer_id, COUNT(payment_id) 
FROM payment 
GROUP BY customer_id 
HAVING COUNT(payment_id) >= 40

q2) SELECT customer_id, SUM(amount) FROM payment 
WHERE staff_id = 2
GROUP BY customer_id
HAVING SUM(amount) > 100 

Assessment Test
q1) SELECT customer_id, sum(amount) from payment 
WHERE staff_id = 2
group by customer_id
HAVING sum(amount) > 110
  
q2) SELECT COUNT(*) 
FROM film 
WHERE title ILIKE 'J%'

Q3) SELECT first_name, last_name 
FROM customer 
WHERE address_id < 500 AND first_name ILIKE 'e%' 
ORDER BY customer_id DESC 
LIMIT 1

Challenge 3
Q1) 
-- Update all customers in California via email
SELECT email FROM customer
JOIN address
on address.address_id = customer.address_id
where district = 'California'

Q2)
-- Customer is huge fan of Nick WahlBerg
-- Give list of all movies Nick has been in 

select title from film_actor
RIGHT JOIN film
ON film.film_id = film_actor.film_id
RIGHT JOIN actor
ON actor.actor_id = film_actor.actor_id
WHERE first_name = 'Nick' AND last_name = 'Wahlberg'

#Time and Date
To get date and time with timezone: SELECT NOW()
To get day date time timezone: SELECT TIMEOFDAY()
To get date: SELECT CURRENT_DATE
To get time: SELECT CURRENT_TIME

#Extracting time and date info
Get year/month/day/week/quarter:
SELECT EXTRACT(YEAR/MONTH/WEEK/DAY/QUARTER FROM date_col) FROM table

Get age from timestamp:
SELECT AGE(date_col) from table

Print date-time in specific format: 
SELECT TO_CHAR(payment_date, 'dd-mm-yyyy HH:MI:SS') FROM payment  [12 hour]
SELECT TO_CHAR(payment_date, 'dd-mm-yy HH24:MI:SS') FROM payment  [24 hour]

Challenge 4
Q1) -- During which months did payments occur?
SELECT DISTINCT EXTRACT(MONTH FROM payment_date) FROM payment
OR 
SELECT DISTINCT TO_CHAR(payment_date, 'mm') FROM payment

Q2) -- Format your answer to return full month name
SELECT DISTINCT TO_CHAR(payment_date, 'Month') FROM payment

Q3) -- How many payments occured on a monday?
SELECT COUNT(*)
FROM payment
WHERE TO_CHAR(payment_date, 'Day') = 'Monday   '

ASSESSMENT TEST 2
1. SELECT * FROM cd.facilities

2. SELECT fac.name, fac.membercost
FROM cd.facilities as fac

3. SELECT *
FROM cd.facilities AS fac
WHERE fac.membercost > 0

4. SELECT fac.facid, fac.name, fac.membercost, fac.monthlymaintenance
FROM cd.facilities AS fac
WHERE fac.membercost > 0 
AND fac.membercost < 0.02 * fac.monthlymaintenance

5. SELECT * FROM cd.facilities AS fac
WHERE fac.name ILIKE '%tennis%'

6. SELECT * FROM cd.facilities AS fac
WHERE fac.facid = 1 or fac.facid = 5

7. SELECT * FROM cd.members
WHERE joindate > '2012-09-01'

8. SELECT DISTINCT surname FROM cd.members
ORDER BY surname
LIMIT 10

9. SELECT joindate FROM cd.members
ORDER BY joindate DESC
LIMIT 1

10. SELECT COUNT(*) FROM cd.facilities
WHERE guestcost > 10

12. SELECT facId, sum(slots)
FROM cd.bookings
GROUP BY facId

